/*
 * Created on 2022-11-29 ( Time 13:09:32 )
 * Generated by Telosys Tools Generator ( version 3.3.0 )
 */
import { Container } from 'inversify';

import { BulletinBoardController } from '../controllers/bulletinboard.controller';
import { IBulletinBoardController } from '../controllers/interfaces/bulletinboard-controller.interface';
import { IBulletinBoardService } from '../services/interfaces/bulletinboard-service.interface';
import { BulletinBoardService } from '../services/bulletinboard-service';

import { Symbols } from './types';
import { IBulletinBoardRepository } from '../repositories/interfaces/bulletinboard-repository.interface';
import { BulletinBoardRepository } from '../repositories/bulletinboard-respository';
import { profile } from './axios.config';
import { BulletinBoardRepositoryMock } from '../repositories/mock/bulletinboard-respository.mock';
import { IAuthenticationController } from '../controllers/interfaces/authentication-controller.interface';
import { AuthenticationController } from '../controllers/authentication.controller';
import { IAuthenticationService } from '../services/interfaces/authentication-service.interface';
import { AuthenticationService } from '../services/authentication-service';
import { IPersonInfoController } from '../controllers/interfaces/person-info-controller.interface';
import { PersonInfoController } from '../controllers/person-info.controller';
import { IPersonInfoService } from '../services/interfaces/person-info-service.interface';
import { PersonInfoService } from '../services/person-info.service';
import { PersonInfoMockService } from '../services/mock/personinfo-mock.service';
import { IAuthorisedRepController } from '../controllers/interfaces/authorised-rep-controller.interface';
import { AuthorisedRepController } from '../controllers/authorised-rep.controller';
import { IAuthorisedRepService } from '../services/interfaces/authorised-rep-service.interface';
import { AuthorisedRepService } from '../services/authorised-rep.service';
import { AuthorisedRepMockService } from '../services/mock/authorised-rep-mock.service';
import { IAuthenticationRepository } from '../repositories/interfaces/authentication-repository.interface';
import { AuthenticationRepository } from '../repositories/authentication-repository';
import { AccountInfoController } from '../controllers/account-info.controller';
import { IAccountInfoController } from '../controllers/interfaces/account-info-controller.interface';
import { AccountInfoService } from '../services/account-info.service';
import { AccountInfoMockService } from '../services/mock/account-info-mock.service';
import { IAccountInfoService } from '../services/interfaces/account-info-service.interface';

const container = new Container(); // Initialize the IOC bindings

container.bind<IAuthenticationRepository>(Symbols.IAuthenticationRepository).to(AuthenticationRepository);
container.bind<IAuthenticationService>(Symbols.IAuthenticationService).to(AuthenticationService);
container.bind<IAuthenticationController>(Symbols.IAuthenticationController).to(AuthenticationController);

container.bind<IBulletinBoardController>(Symbols.IBulletinBoardController).to(BulletinBoardController);
container.bind<IBulletinBoardService>(Symbols.IBulletinBoardService).to(BulletinBoardService);

container.bind<IPersonInfoController>(Symbols.IPersonInfoController).to(PersonInfoController);

container.bind<IAuthorisedRepController>(Symbols.IAuthorisedRepController).to(AuthorisedRepController);

container.bind<IAccountInfoController>(Symbols.IAccountInfoController).to(AccountInfoController);

if(profile == 'mock') {
    container.bind<IBulletinBoardRepository>(Symbols.IBulletinBoardRepository).to(BulletinBoardRepositoryMock);
    container.bind<IPersonInfoService>(Symbols.IPersonInfoService).to(PersonInfoMockService);
    container.bind<IAuthorisedRepService>(Symbols.IAuthorisedRepService).to(AuthorisedRepMockService);
    container.bind<IAccountInfoService>(Symbols.IAccountInfoService).to(AccountInfoMockService);
    
} else {
    container.bind<IBulletinBoardRepository>(Symbols.IBulletinBoardRepository).to(BulletinBoardRepository);
    container.bind<IPersonInfoService>(Symbols.IPersonInfoService).to(PersonInfoService);
    container.bind<IAuthorisedRepService>(Symbols.IAuthorisedRepService).to(AuthorisedRepService);
    container.bind<IAccountInfoService>(Symbols.IAccountInfoService).to(AccountInfoService);
}



export default container;
